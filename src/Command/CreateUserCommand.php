<?php

namespace App\Command;

use App\Entity\User;
use App\Repository\DepartmentRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\Question;
use Symfony\Component\Console\Helper\QuestionHelper;

#[AsCommand(
    name: 'app:create-user',
)]
class CreateUserCommand extends Command
{
    public function __construct(
        private EntityManagerInterface $em,
        private DepartmentRepository $departmentRepository
    ) {
        parent::__construct();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        /** @var QuestionHelper $helper */
        $helper = $this->getHelper('question');

        $firstName = $helper->ask($input, $output, $this->requiredQuestion('–í–≤–µ–¥–∏—Ç–µ –∏–º—è: '));
        $lastName = $helper->ask($input, $output, $this->requiredQuestion('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é: '));
        $age = $helper->ask($input, $output, $this->requiredQuestion('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç: '));
        $status = $helper->ask($input, $output, $this->requiredQuestion('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å: '));
        $telegram = $helper->ask($input, $output, $this->requiredQuestion('–í–≤–µ–¥–∏—Ç–µ Telegram: '));
        $email = $helper->ask($input, $output, $this->requiredQuestion('–í–≤–µ–¥–∏—Ç–µ email: '));
        $address = $helper->ask($input, $output, $this->requiredQuestion('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å: '));

        $output->writeln("\nüìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤:");
        $departments = $this->departmentRepository->findAll();
        foreach ($departments as $department) {
            $output->writeln("  [{$department->getId()}] {$department->getName()}");
        }

        $departmentId = $helper->ask($input, $output, $this->requiredQuestion("\n–í–≤–µ–¥–∏—Ç–µ ID –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞: "));
        $department = $this->departmentRepository->find($departmentId);

        if (!$department) {
            $output->writeln("<error>‚ùå –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Å ID {$departmentId} –Ω–µ –Ω–∞–π–¥–µ–Ω.</error>");
            return Command::FAILURE;
        }

        $user = new User();
        $user->setFirstName($firstName);
        $user->setLastName($lastName);
        $user->setAge((int)$age);
        $user->setStatus($status);
        $user->setTelegram($telegram);
        $user->setEmail($email);
        $user->setAddress($address);
        $user->setDepartment($department);
        $user->setIcon('default.png');


        $this->em->persist($user);
        $this->em->flush();

        $output->writeln("\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: " . $user->getId());

        return Command::SUCCESS;
    }

    private function requiredQuestion(string $text): Question
    {
        $question = new Question($text);
        $question->setValidator(function ($value) {
            if (empty($value)) {
                throw new \RuntimeException('–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }
            return $value;
        });
        $question->setMaxAttempts(3);
        return $question;
    }
}
